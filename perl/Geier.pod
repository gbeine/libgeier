=head1 NAME

Geier - Perl Extention to Elster/Coala interface

=head1 SYNOPSIS

  use Geier;
  Geier::init(0);

  my $coala = new Geier();
  $coala->validate($data);

=head1 DESCRIPTION

This Perl Module supplies Perl bindings to the GEIER library. 
GEIER is the first free library to send gathered tax declarations data to
the German inland revenue office.

GEIER as well as this module is part of the Taxbird project.

=head1 USAGE

This module can be used in two ways.  Class-based approach is somewhat
recommended but you can choose the other (class-less) approach as well.

The latter approach works just the same way as you drive the libgeier in
C.  There you have to first initialize libgeier itself (calling init),
then you allocate yourself a context and call the send-function passing
the context as well as the argument.

 EXAMPLE:

	Geier::init(0);
	my $context = Geier::context_new();
	my $result = Geier::_send($context, $data);
	Geier::context_free($context);

Note, that for the direct (class-less) call you need to put an
underquote before the method's name.  Furthermore note, that the
specified data has to be a scalar string, representing the XML document
to send, validate, etc., this is, you cannot provide a XML::Twig or
something similar here.

If you choose to use the class-based, yet suggested, approach, you need
to intialize libgeier as well by calling init, afterwards get an
instance of the Geier class and call it's methods:

 EXAMPLE:

	Geier::init(0);
	my $coala = new Geier();
	$coala->validate($data);

Thus no need to care for the context stuff.

=head1 FUNCTIONS

=head2 sub init(debug) - Initialize the GEIER library

This function has to be called first. The parameter is to ask for
debugging messages from the GEIER library. This does not have any effect
yet, however.  This is you should specify a zero there.

=head2 sub exit() - Deinitialize the GEIER library

You are expected to call this if you do not intend to call any more
functions from the GEIER library, to free some memory.  In case you want
to call GEIER functions later on, mind that you need to call B<init>
before.

=head2 sub new() - Create a new Class instance

This function creates a new instance of the Geier class.  It
does not accept any parameter. 

 EXAMPLE:

	Geier::init(0);
	my $coala = new Geier();

=head2 sub encrypt(document) - Encrypts a Coala XML document

This function takes a Coala document (a string) and encrypts it
(the parts the Coala specification wants to be crypted).
Furthermore it automatically handles compression and base64
encoding.

The resulting document (a string again) is returned on success.
If errors have occured I<undef> is returned.

 EXAMPLE:

	my $enc = $coala->encrypt($xmldoc);
	die "document probably invalid" unless($enc);

=head2 sub send_encrypted(document) - Send an already encrypted XML document

This functions tries to send the provided Coala XML-tree
(supplied as a string) to the German inland revenue office. The
data is not processed any further, this is it needs to be
encrypted already.

If the communication with the Coala clearing host passed by in a
successful way, the received result is passed back (again, not
processed in any way).  In case the connection couldn't be set
up correctly or failed in any other way, I<undef> is returned.

 EXAMPLE:

	my $resp = $coala->send_encrypted($enc);
	die "couldn't talk to elster server" unless($resp);

=head2 sub send(document) - Encrypt, Send and Decrypt a Coala XML document

This function is actually for the lazy. It takes a Coala XML-tree
(supplied as a string), encrypts it, tries to send it to the German
inland revenue office and afterwards automatically decrypts it.

If one of the named steps fails, I<undef> is returned. Otherwise the
decrypted result received from the inland revenue office's host is
returned. 

If for any reason the clearing host did not accept the document, the
send function returns in a successful manner (not returning I<undef>).
You need to use B<get_clearing_error> to check for that.

 EXAMPLE:

	my $result = $coala->send($xmldoc);
	die "communication with elster host failed" unless($result);

=head2 sub validate(document) - Validate the Coala XML document

This function validates the provided Coala XML document using the
Schema files provided by the inland revenue office.

On success (if the document is valid, concerning the Schema file) zero
is returned.

The validate function currently understands unecrypted data only.
Encrypted data cannot yet be validated.

 EXAMPLE:

	if(! $coala->validate($xmldoc)) { die "schema error"; }

=head2 sub xsltify(document) - XSLT process the Coala XML document

This function mangles the provided Coala XML document through a XSLT
processor, converting it into a HTML document (which can be used as a
protocol for example).

On success the HTML document is returned as a string, I<undef> is 
returned otherwise.

 EXAMPLE:

	my $htmldoc = $coala->xsltify($result);
	die "xsltification error" unless($htmldoc);
	print $htmldoc, "\n";

=head2 sub get_clearing_error(document) - extract error messages

This function extracts error messages from the XML document as returned
by the inland revenue office's clearing host. Mind that you need to
provide an unencrypted Coala XML document (as a string).

If there was no error message, i.e. the Coala XML document has been
accepted, I<undef> is returned.

 EXAMPLE:

	my $fail = $coala->get_clearing_error($result);
	die "failed: $fail" if($fail);
	print "we did it.\n";

=head2 sub decrypt(document) - decrypt clearing host's response

This function does decrypt the result received from the clearing host.
Use it to decrypt what you've received using B<send_encrypted>.  In case
you use the send function, you do not have to call this.

The resulting document (a string again) is returned on success.
If errors have occured I<undef> is returned.

 EXAMPLE:

	my $result = $coala->decrypt($resp);
	die "failed" unless($result);

=head1 AUTHOR

Stefan Siegl <stesie@brokenpipe.de>

=head1 COPYRIGHT

The Geier module is subject of the GNU General Public License version 2
or any later on your option.

Copyright claimed by Stefan Siegl <stesie@brokenpipe.de>.

B<libgeier> is subject of the GNU General Publice License version 2 or
any later (on your option) as well. Copyright claimed by Juergen
Stuber <juergen@jstuber.net> and Stefan Siegl <stesie@brokenpipe.de>

=head1 BUGS

If you happen to find a bug, in either this module or the libgeier in
general, please either mail me directly to B<stesie@brokenpipe.de> or to
the Taxbird mailing list, see the webpages at http://www.taxbird.de/ for
details.

